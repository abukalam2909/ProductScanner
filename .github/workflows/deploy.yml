name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      CLUSTER_NAME: barcode-cluster
      SERVICE_NAME: nutrition-analyser-container-service

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker tag
        id: vars
        run: echo "TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Spring Boot Application
        run: mvn clean package -DskipTests
        working-directory: ./Backend

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/barcode-backend:${{ env.TAG }} ./Backend
          docker push ${{ steps.login-ecr.outputs.registry }}/barcode-backend:${{ env.TAG }}

      - name: Update K8s Manifest with New Image
        run: |
          sed -i "s|image:.*|image: ${{ steps.login-ecr.outputs.registry }}/barcode-backend:${{ env.TAG }}|g" Backend/Kubernetes/Deployment.yaml

      - name: Set up kubectl
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Deploy to EKS
        run: |
          kubectl apply -f Backend/Kubernetes/

      - name: Wait for LoadBalancer DNS
        run: |
          for i in {1..30}; do
            DNS=$(kubectl get svc $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ "$DNS" != "" ]; then
              echo "DNS found: $DNS"
              echo "API_BASE_URL=$DNS" >> $GITHUB_ENV
              break
            fi
            echo "Waiting for LoadBalancer DNS..."
            sleep 10
          done

      - name: Patch config.js
        run: |
          echo "window._env_ = { API_BASE_URL: 'http://${{ env.API_BASE_URL }}' };" > Frontend-UI/js/config.js

      - name: Sync Frontend to S3
        run: |
          aws s3 sync Frontend-UI/ s3://${{ secrets.S3_BUCKET }}/ --delete
