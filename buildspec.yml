version: 0.2

env:
  variables:
    ECR_REPO_URI: "290182369109.dkr.ecr.us-east-1.amazonaws.com/barcode-backend"
    CLUSTER_NAME: "barcode-cluster"
    REGION: "us-east-1"
    SERVICE_NAME: "nutrition-analyser-container-service"
    BUCKET_NAME: "barcode-ui-${CODEBUILD_RESOLVED_SOURCE_VERSION}"  # optionally fixed in Terraform

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $REGION | docker login --username AWS $ECR_REPO_URI
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-7)
      - echo $IMAGE_TAG > image_tag.txt
      - echo Building Docker image with tag: $IMAGE_TAG
  build:
    commands:
      - docker build -t $ECR_REPO_URI:$IMAGE_TAG ./backend
      - docker push $ECR_REPO_URI:$IMAGE_TAG
      - sed -i "s|image:.*|image: $ECR_REPO_URI:$IMAGE_TAG|g" Backend/deployment.yaml
      - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
      - kubectl apply -f Backend/Kubernetes/
      - echo Waiting for service external DNS...
      - >
        DNS=""
        while [ -z "$DNS" ]; do
          DNS=$(kubectl get svc $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          [ -z "$DNS" ] && echo "Waiting for LoadBalancer DNS..." && sleep 10
        done
      - echo Found DNS: $DNS
      - echo "window._env_ = { API_BASE_URL: 'http://$DNS' };" > Frontend-UI/js/config.js
  post_build:
    commands:
      - aws s3 sync Frontend-UI/ s3://$BUCKET_NAME/ --delete

artifacts:
  files:
    - image_tag.txt
